@page "/u/{userId:int}"
@using System.Globalization
@using Oldsu
@using Oldsu.Enums
@using Oldsu.Types
@using Oldsu.Web
@using Oldsu.Web.Utils


@{
    Layout = "BaseLayoutWithBanner";
    StatsWithRank? userStats = Model.UserStats;
    UserPage? userPage = Model.UserPageInfo;

    string GetCommaSeparatedNumber(ulong n) => n.ToString("N0", new CultureInfo("en-US"));

    // yoinked and adapted from https://stackoverflow.com/a/4127477
    int GetAge(DateTime start)
    {
        DateTime now = DateTime.Now;

        return now.Year - start.Year - 1 +
               (now.Month > start.Month ||
                now.Month == start.Month && now.Day >= start.Day ? 1 : 0);
    }
    
    uint GetHits(uint one, uint two, uint three, uint four) {
        return one + two + three + four;
    }
    
    double CalculateAccuracy(uint count50, uint count100, uint count300, uint countMiss) {
        return (double)Math.Round((double)(count50 * 50 + count100 * 100 + count300 * 300) / (double)(GetHits(count50, count100, count300, countMiss) * 300) * 100, 2);
    }
}

<script src=@PathCorrection.Correct("/resources/js/user_level_calc.js")></script>
<script src=@PathCorrection.Correct("/resources/js/chart.min.js")></script>
<script src=@PathCorrection.Correct("/resources/js/accuracy_calc.js")></script>

<script id="stats" type="application/json">
@Json.Serialize(new {totalScore = userStats?.TotalScore ?? 0, rankHistory = Model.RankHistory})
</script>

@model Oldsu.Web.Pages.UserPage

<div class="user_content">
<div class="user_card-info_wrapper">
    <div class="user_card">
        <h2 class="user_card_name">@(Model.UserInfo.Username)</h2>
        <img src="@PathCorrection.Correct(Model.UserInfo.AvatarBaseUrl)" alt="@(Model.UserInfo.Username)'s avatar" class="user_card_avatar" width="128px" height="128px">
        <div class="user_card_badges_wrapper">
            @foreach(Badge badge in Model.Badges!) {
                <img src="@PathCorrection.Correct("/resources/image/@badge.Filename")" alt="@badge.Filename" class="user_card_badge">
            }
        </div>
        <h3 class="user_card_player_title">@userPage?.Title</h3>
        <div class="user_card_ranking">
            <img class="user_card_ranking_flag" src="@PathCorrection.Correct(Model.UserInfo.FlagBaseUrl)" alt="Country: @CountryCodes.FromCode[Model.UserInfo.Country]" height="48px">
            @{
                if (userStats != null)
                {
                    <div class="user_card_ranking_values_wrapper">
                        <h3 class="user_card_ranking_rank">Rank #@GetCommaSeparatedNumber(userStats.Rank)</h3>
                        <h3 class="user_card_ranking_level" id="user_card_ranking_level">Level @userStats.UserLevel</h3>
                    </div>
                }
            }
        </div>
    </div>
    @{
        if (Model.UserPageInfo != null)
        {
            <div class="user_info">
                @{
                    if (userPage.Birthday != null)
                    {
                        <h5 class="user_info_age">Age: @GetAge((DateTime) userPage.Birthday)</h5>
                    }
                }
                @{
                    if (!string.IsNullOrEmpty(userPage.Occupation))
                    {
                        <h5 class="user_info_occupation">Occupation: @(userPage.Occupation)</h5>
                    }
                }
                @{
                    if (!string.IsNullOrEmpty(userPage.Interests))
                    {
                        <h5 class="user_info_interests">Interests: @(userPage.Interests)</h5>
                    }
                }
                @{
                    if (!string.IsNullOrEmpty(userPage.Website))
                    {
                        <h5 class="user_info_website">Website: <a href="@userPage.Website">@(userPage.Website)</a></h5>
                    }
                }
                @{
                    if (!string.IsNullOrEmpty(userPage.Twitter))
                    {
                        <h5 class="user_info_twitter">Twitter: @(userPage.Twitter)</h5>
                    }
                }
                @{
                    if (!string.IsNullOrEmpty(userPage.Discord))
                    {
                        <h5 class="user_info_discord">Discord: @(userPage.Discord)</h5>
                    }
                }
                <h4 class="user_info_joindate">Joined: @Model.UserInfo.JoinedAt.ToShortDateString()</h4>
            </div>
        }
    }
</div>
<div class="user_stat_wrapper">
    @{
        if (Model.UserStats != null)
        {
            <div class="user_stat_info">
                <div class="user_stat_heading_wrapper">
                    <h4 class="user_stat_heading">
                        Information for:
                        @{
                            var mode = Model.UserStats.Mode switch 
                            {
                                Mode.Standard => "osu!",
                                Mode.Taiko => "osu!taiko",
                                Mode.CatchTheBeat => "catch the beat!",
                                Mode.Mania => "osu!mania"
                            };
                            
                            @mode
                        }
                    </h4>
                </div>
                <div class="user_stat_info_rankgraph">
                    <span class="user_stat_info_rankgraph_text">
                        <canvas id="myChart" width="600" height="200"></canvas>
                    </span>
                </div>
                <div class="user_stat_info_values">
                    <h5 class="user_stat_info_value_title">Total Playtime:</h5>
                    <h5 class="user_stat_info_value_number">0s</h5>
                    <h5 class="user_stat_info_value_title">Ranked Score:</h5>
                    <h5 class="user_stat_info_value_number">@GetCommaSeparatedNumber(userStats.RankedScore)</h5>
                    <h5 class="user_stat_info_value_title">Accuracy:</h5>
                    <h5 class="user_stat_info_value_number">@($"{userStats.Accuracy:.##}")%</h5>
                    <h5 class="user_stat_info_value_title">Playcount:</h5>
                    <h5 class="user_stat_info_value_number">@GetCommaSeparatedNumber(userStats.Playcount)</h5>
                    <h5 class="user_stat_info_value_title">Medals:</h5>
                    <h5 class="user_stat_info_value_number">0</h5>
                </div>
                <div class="user_stat_info_ranks">
                    <h5 class="silv_SS_rank_text">SS</h5>
                    <h5 class="silv_SS_rank_value">@GetCommaSeparatedNumber(userStats.CountSSH)</h5>
                    <h5 class="gold_SS_rank_text">SS</h5>
                    <h5 class="gold_SS_rank_value">@GetCommaSeparatedNumber(userStats.CountSS)</h5>
                    <h5 class="silv_S_rank_text">S</h5>
                    <h5 class="silv_S_rank_value">@GetCommaSeparatedNumber(userStats.CountSH)</h5>
                    <h5 class="gold_S_rank_text">S</h5>
                    <h5 class="gold_S_rank_value">@GetCommaSeparatedNumber(userStats.CountS)</h5>
                    <h5 class="A_rank_text">A</h5>
                    <h5 class="A_rank_value">@GetCommaSeparatedNumber(userStats.CountA)</h5>
                </div>
            </div>
        }
        else
        {
            <h5>User hasn't yet played any maps on this gamemode, try to persuade them to play it!</h5>
        }
    }
    @{
        if (userPage?.BBText != null)
        {
            <div class="user_stat_wrapper">
                <div class="user_stat_info">
                    <div class="user_stat_heading_wrapper">
                        <h4 class="user_stat_heading">Signature</h4>
                    </div>
                    <div class="user_signature_text_wrapper">
                        <p class="user_signature_text">
                            @Html.Raw(BBCodeHelper.Format(userPage?.BBText ?? string.Empty))
                        </p>
                    </div>
                </div>
            </div>
        }
    }

    @{
        if (Model.UserStats != null)
        {
            <div class="user_stat_wrapper">
                <div class="user_stat_fp">
                    <div class="user_stat_heading_wrapper">
                        <h4 class="user_stat_heading">Top Scores</h4>
                    </div>
                    <div class="first_places_wrapper">
                        @{
                            foreach (var score in Model.TopScores!)
                            {
                                <div class="first_place_content">
                                    <div class="first_place_metadata-bg_wrapper">
                                        @{
                                            // map is a bancho map
                                            if (score.Beatmap.OriginalBeatmapID != null)
                                            {
                                                <img class="first_place_bg" src=@($"https://b.ppy.sh/thumb/{score.Beatmap.Beatmapset.OriginalBeatmapsetID}l.jpg") alt="Artist - Title (by Mapper)">
                                            }
                                            else
                                            {
                                                <img class="first_place_bg" src="@PathCorrection.Correct("/resources/image/discoprincebg.jpg")" alt="Artist - Title (by Mapper)">
                                            }
                                        }
                                        <div class="first_place_metadata_wrapper">
                                            <span class="first_place_metadata">@($"{score.Beatmap.Beatmapset.Artist} - {score.Beatmap.Beatmapset.Title} (by {score.Beatmap.Beatmapset.CreatorName})")</span>
                                            <span class="first_place_diff">@($"{score.Beatmap.DifficultyName}")</span>
                                        </div>
                                    </div>
                                    <div class="first_place_score_details">
                                        <div class="first_place_rank">
                                            <img class="first_place_rank_image" src=@PathCorrection.Correct("/resources/image/ranks/gl_SS.png")>
                                        </div>
                                        <span>@($"{GetCommaSeparatedNumber(score.Score)}")&nbsp;</span>
                                        <span class="first_place_score_acc" id="score_row_accuracy">
                                            @(CalculateAccuracy(score.Hit50, score.Hit100 + score.HitKatu, score.Hit300 + score.HitGeki, score.HitMiss))%
                                        </span>
                                        <span class="first_place_score_mods">@((Mod)score.Mods)</span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>

            <div class="user_stat_wrapper">
                <div class="user_stat_fp">
                    <div class="user_stat_heading_wrapper">
                        <h4 class="user_stat_heading">First Places</h4>
                    </div>
                    <div class="first_places_wrapper">
                        <div class="first_place_content">
                            <div class="first_place_metadata-bg_wrapper">
                                <img class="first_place_bg" src=@PathCorrection.Correct("/resources/image/discoprincebg.jpg") alt="Artist - Title (by Mapper)">
                                <div class="first_place_metadata_wrapper">
                                    <span class="first_place_metadata">Artist - Title (by Mapper)</span>
                                    <span class="first_place_diff">[Difficulty]</span>
                                </div>
                            </div>
                            <div class="first_place_score_details">
                                <div class="first_place_rank">
                                    <img class="first_place_rank_image" src=@PathCorrection.Correct("/resources/image/ranks/gl_SS.png")>
                                </div>
                                <span class="first_place_score_acc">00.00%</span>
                                <span class="first_place_score_mods">HD DT HR FL</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>
</div>

<script>
    const stats = JSON.parse(document.getElementById("stats").textContent);
    document.getElementById("user_card_ranking_level").textContent = `Level: ${calcLevelPrecise(stats.totalScore).toFixed(0)}`
</script>

<script>  
    var ctx = document.getElementById('myChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: stats.rankHistory.map(rh => new Date(rh.date).toLocaleDateString()),
            datasets: [
              {
                label: "Rank",
                data: stats.rankHistory.map(rh => rh.rank),
                borderColor: "#FF7400",
                fill: false,
                cubicInterpolationMode: 'monotone',
                tension: 0.4
              }
            ]
          },
          options: {
            responsive: true,
            plugins: {
              legend: false,
              title: {
                display: false,
              },
            },
            interaction: {
              intersect: false,
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true
                }
              },
              y: {
                display: true,
                title: {
                  display: false,
                },
                suggestedMin: 0,
              }
            }
          },
    });
</script>